// Calculate rem from px
@function calculateRem($size) {
  $remSize: $size / $rootSize;
  @return $remSize * 1rem;
}

@function calculateLHRem($size){
  $LHSize: calculateRem($size);
  @return $LHSize;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
  line-height: $size * 1.45;
  line-height: calculateLHRem($size) * 1.45;
}

@mixin getFontSize($size) {
  font-size: $size;
  font-size: calculateRem($size);
  line-height: $size * 1.45;
  line-height: calculateLHRem($size) * 1.45;
}

// Transition
@mixin transition($args) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

// Border radius
@mixin border-radius($radius) {
  -moz-border-radius: $radius;
  -webkit-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

// Box shadow
@mixin box-shadow($shadow){
  -moz-box-shadow: $shadow;
  -webkit-box-shadow: $shadow;
  -ms-box-shadow: $shadow;
  box-shadow: $shadow;
}

// Convert HEX to RGBA
@mixin rgba-background($hexcolor, $opacity: 1) {
  @if $opacity == 1 {
    background-color: $hexcolor;
  }
  @else {
    background-color: $hexcolor;
    background-color: rgba($hexcolor, $opacity);
  }
}

// Media queries
@mixin bp-large {
  @media only screen and (min-width: 1200px) {
    @content;
  }
}

@mixin bp-medium {
  @media only screen and (min-width: 920px) {
    @content;
  }
}

@mixin bp-mobile{
  @media only screen and (max-width: 919px){
    @content
  }
}

@mixin bp-small {
  @media only screen and (min-width: 768px) {
    @content;
  }
}

@mixin bp-xsmall {
  @media only screen and (max-width: 767px){
    @content;
  }
}
